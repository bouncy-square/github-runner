name: Build and Publish Docker Image

on:
  release:
    types: [created, published]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to build (e.g., v1.0.0)'
        required: true
        type: string
      force_build:
        description: 'Force build even if no release found'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

permissions:
  contents: write 
  packages: write
  actions: read

jobs:
  debug:
    name: Debug Event
    runs-on: ubuntu-latest
    steps:
      - name: Debug GitHub Event
        run: |
          echo "=== TRIGGER DEBUG ==="
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "Ref: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          
          if [[ "${{ github.event_name }}" == "release" ]]; then
            echo "=== RELEASE EVENT ==="
            echo "Event action: ${{ github.event.action }}"
            echo "Release state: ${{ github.event.release.draft }}"
            echo "Release prerelease: ${{ github.event.release.prerelease }}"
            echo "Release published_at: ${{ github.event.release.published_at }}"
            echo "Release tag: ${{ github.event.release.tag_name }}"
            echo "Release author: ${{ github.event.release.author.login }}"
            echo "Release created by PAT: $(if [[ '${{ github.event.release.author.login }}' != 'github-actions[bot]' ]]; then echo 'YES'; else echo 'NO'; fi)"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "=== MANUAL TRIGGER ==="
            echo "Release tag: ${{ github.event.inputs.release_tag }}"
            echo "Force build: ${{ github.event.inputs.force_build }}"
          fi

  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release information
        id: get_release
        uses: actions/github-script@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let releaseTag = '';
            let branchName = 'main';
            let releaseId = '';
            let releaseBody = '';
            let triggerSource = '';
            
            if ('${{ github.event_name }}' === 'workflow_dispatch') {
              releaseTag = '${{ github.event.inputs.release_tag }}';
              triggerSource = 'manual_dispatch';
              console.log('Manual workflow dispatch with tag:', releaseTag);
              
              // Try to find the corresponding release
              try {
                const { data: release } = await github.rest.repos.getReleaseByTag({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag: releaseTag
                });
                
                branchName = release.target_commitish || 'main';
                releaseId = release.id;
                releaseBody = release.body || '';
                console.log('Found corresponding release for manual dispatch');
              } catch (error) {
                console.log('No release found for tag, will create Docker image anyway');
                if ('${{ github.event.inputs.force_build }}' !== 'true') {
                  core.setFailed(`No release found for tag ${releaseTag}. Use force_build option to build anyway.`);
                  return;
                }
              }
            } else if ('${{ github.event_name }}' === 'release') {
              // Direct release event (both automatic via PAT and manual)
              releaseTag = '${{ github.event.release.tag_name }}';
              branchName = '${{ github.event.release.target_commitish }}' || 'main';
              releaseId = '${{ github.event.release.id }}';
              releaseBody = `${{ github.event.release.body }}` || '';
              
              // Determine if this was created automatically or manually
              const author = '${{ github.event.release.author.login }}';
              triggerSource = author === 'github-actions[bot]' ? 'auto_release_github_token' : 'auto_release_pat_or_manual';
              
              console.log(`Release event - Author: ${author}, Source: ${triggerSource}`);
              console.log('Release tag:', releaseTag);
            }
            
            core.setOutput('release_tag', releaseTag);
            core.setOutput('branch_name', branchName);
            core.setOutput('release_id', releaseId);
            core.setOutput('release_body', releaseBody);
            core.setOutput('trigger_source', triggerSource);

      - name: Extract branch name and version
        shell: bash
        run: |
          RELEASE_TAG="${{ steps.get_release.outputs.release_tag }}"
          BRANCH_NAME="${{ steps.get_release.outputs.branch_name }}"
          TRIGGER_SOURCE="${{ steps.get_release.outputs.trigger_source }}"
          
          # Sanitize branch name for Docker tag (replace / and other invalid chars with -)
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "SANITIZED_BRANCH=$SANITIZED_BRANCH" >> $GITHUB_ENV
          echo "VERSION=$RELEASE_TAG" >> $GITHUB_ENV
          echo "TRIGGER_SOURCE=$TRIGGER_SOURCE" >> $GITHUB_ENV
          
          echo "=== BUILD INFO ==="
          echo "Branch: $BRANCH_NAME"
          echo "Sanitized: $SANITIZED_BRANCH"
          echo "Version: $RELEASE_TAG"
          echo "Trigger: $TRIGGER_SOURCE"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:master
          install: true
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.VERSION }}
            type=semver,pattern={{major}}.{{minor}},value=${{ env.VERSION }}
            type=semver,pattern={{major}},value=${{ env.VERSION }},enable={{is_default_branch}}
            
            type=raw,value=${{ env.SANITIZED_BRANCH }}-latest
            type=raw,value=${{ env.SANITIZED_BRANCH }}-${{ env.VERSION }}
            
            type=sha,format=long,prefix=${{ env.SANITIZED_BRANCH }}-sha-

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.SANITIZED_BRANCH }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.SANITIZED_BRANCH }}-
            ${{ runner.os }}-buildx-

      - name: Debug environment variables
        run: |
          echo "=== FINAL BUILD CONTEXT ==="
          echo "Event name: ${{ github.event_name }}"
          echo "GitHub ref: ${{ github.ref }}"
          echo "GitHub SHA: ${{ github.sha }}"
          echo "BRANCH_NAME: ${{ env.BRANCH_NAME }}"
          echo "SANITIZED_BRANCH: ${{ env.SANITIZED_BRANCH }}"
          echo "VERSION: ${{ env.VERSION }}"
          echo "TRIGGER_SOURCE: ${{ env.TRIGGER_SOURCE }}"
          echo "Docker tags that will be created:"
          echo "${{ steps.meta.outputs.tags }}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            BRANCH_NAME=${{ env.BRANCH_NAME }}
            SANITIZED_BRANCH=${{ env.SANITIZED_BRANCH }}
            environ=${{ env.SANITIZED_BRANCH }}
            version=${{ env.VERSION }}
            trigger_source=${{ env.TRIGGER_SOURCE }}

      - name: Update Release with Docker Info
        if: success() && steps.get_release.outputs.release_id != ''
        uses: actions/github-script@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            const releaseId = '${{ steps.get_release.outputs.release_id }}';
            const version = '${{ env.VERSION }}';
            const branchName = '${{ env.BRANCH_NAME }}';
            const sanitizedBranch = '${{ env.SANITIZED_BRANCH }}';
            const triggerSource = '${{ env.TRIGGER_SOURCE }}';
            const registry = '${{ env.REGISTRY }}'.toLowerCase();
            const ownerLower = owner.toLowerCase();
            const imageName = `${registry}/${ownerLower}/${repo}`;
            const releaseBody = `${{ steps.get_release.outputs.release_body }}`;
            
            const versionMatch = version.match(/v?(\d+)\.(\d+)\.(\d+)/);
            const majorVersion = versionMatch ? versionMatch[1] : '';
            const minorVersion = versionMatch ? `${versionMatch[1]}.${versionMatch[2]}` : '';
            let triggerText = '';
            switch(triggerSource) {
              case 'manual_dispatch':
                triggerText = '🚀 **Manual Workflow Dispatch**';
                break;
              case 'auto_release_pat_or_manual':
                triggerText = '🤖 **Automatic Build** (PAT/Manual Release)';
                break;
              case 'auto_release_github_token':
                triggerText = '🤖 **Automatic Build** (GitHub Token - may not trigger properly)';
                break;
              default:
                triggerText = '🐳 **Docker Build**';
            }
            
            const message = `\n\n### 🐳 Docker Image Available!\n\n` +
                          `${triggerText}\n\n` +
                          `**Version Tag:** \`${imageName}:${version}\`\n` +
                          `**Latest:** \`${imageName}:${sanitizedBranch}-latest\`\n` +
                          `**Branch Version:** \`${imageName}:${sanitizedBranch}-${version}\`\n` +
                          (majorVersion ? `**Major Version:** \`${imageName}:${majorVersion}\`\n` : '') +
                          (minorVersion ? `**Minor Version:** \`${imageName}:${minorVersion}\`\n` : '') +
                          `**SHA Tag:** \`${imageName}:${sanitizedBranch}-sha-${{ github.sha }}\`\n\n` +
                          `#### Quick Start\n\`\`\`bash\n` +
                          `# Pull and run the latest version\n` +
                          `docker pull ${imageName}:${version}\n` +
                          `docker run ${imageName}:${version}\n\n` +
                          `# Pull latest from branch\n` +
                          `docker pull ${imageName}:${sanitizedBranch}-latest\n\`\`\``;

            try {
              await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: releaseId,
                body: releaseBody + message
              });
              console.log('Successfully updated release with Docker info');
            } catch (error) {
              console.log('Failed to update release:', error.message);
            }

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Build Summary
        run: |
          echo "=== DOCKER BUILD SUMMARY ==="
          echo "✅ Docker image built and pushed successfully"
          echo "🏷️ Release: ${{ env.VERSION }}"
          echo "🎯 Trigger: ${{ env.TRIGGER_SOURCE }}"
          echo "🐳 Main Image: ghcr.io/${{ github.repository }}:${{ env.VERSION }}"
          echo "📝 Release updated with Docker info"
          echo ""
          echo "Available Docker tags:"
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' | sed 's/^/  - /'