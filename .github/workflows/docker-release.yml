name: Build and Publish Docker Image

on:
  release:
    types: [published]
  push:
    branches: ["**"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

permissions:
  contents: write 
  packages: write
  actions: read

jobs:
  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract branch name
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # For releases, use the target branch (where the release was created from)
            BRANCH_NAME="${{ github.event.release.target_commitish }}"
          else
            # For pushes, extract branch name from ref
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          # Sanitize branch name for Docker tag (replace / and other invalid chars with -)
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "SANITIZED_BRANCH=$SANITIZED_BRANCH" >> $GITHUB_ENV
          echo "Branch: $BRANCH_NAME"
          echo "Sanitized: $SANITIZED_BRANCH"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:master
          install: true
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For releases: create version tags
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=semver,pattern=${{ env.SANITIZED_BRANCH }}-{{version}}
            
            # For branches: create branch-based tags
            type=raw,value=${{ env.SANITIZED_BRANCH }}-latest,enable={{is_default_branch}}
            type=raw,value=${{ env.SANITIZED_BRANCH }}-latest,enable=${{ github.event_name != 'release' }}
            
            # Additional useful tags
            type=ref,event=branch,prefix={{branch}}-
            type=ref,event=tag
            type=ref,event=pr
            type=sha,format=long,prefix=${{ env.SANITIZED_BRANCH }}-sha-

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.SANITIZED_BRANCH }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.SANITIZED_BRANCH }}-
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            BRANCH_NAME=${{ env.BRANCH_NAME }}
            SANITIZED_BRANCH=${{ env.SANITIZED_BRANCH }}

      - name: Update Release with Image Info
        if: success() && github.event_name == 'release'
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const releaseId = ${{ github.event.release.id }};
            const version = '${{ github.ref_name }}';
            const branchName = process.env.BRANCH_NAME;
            const sanitizedBranch = process.env.SANITIZED_BRANCH;
            const registry = '${{ env.REGISTRY }}'.toLowerCase();
            const ownerLower = owner.toLowerCase();
            const imageName = `${registry}/${ownerLower}/${repo}`;
            
            const versionMatch = version.match(/v?(\d+)\.(\d+)\.(\d+)/);
            const majorVersion = versionMatch ? versionMatch[1] : '';
            const minorVersion = versionMatch ? `${versionMatch[1]}.${versionMatch[2]}` : '';
            
            const message = `### üê≥ Docker Image\n` +
                          `**Latest Image:** \`${imageName}:${sanitizedBranch}-latest\`\n` +
                          `**Version Tag:** \`${imageName}:${version}\`\n` +
                          `**Branch Version:** \`${imageName}:${sanitizedBranch}-${version}\`\n` +
                          (majorVersion ? `**Major Version:** \`${imageName}:${majorVersion}\`\n` : '') +
                          (minorVersion ? `**Minor Version:** \`${imageName}:${minorVersion}\`\n` : '') +
                          `**SHA Tag:** \`${imageName}:${sanitizedBranch}-sha-${{ github.sha }}\`\n\n` +
                          `#### Pull Commands\n\`\`\`bash\n` +
                          `# Pull by version (recommended)\ndocker pull ${imageName}:${version}\n\n` +
                          `# Pull by branch version\ndocker pull ${imageName}:${sanitizedBranch}-${version}\n\n` +
                          `# Pull latest from branch\ndocker pull ${imageName}:${sanitizedBranch}-latest\n\`\`\``;

            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: releaseId,
              body: `${{ github.event.release.body }}\n\n${message}`
            });

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache