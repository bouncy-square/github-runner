name: Build and Publish Docker Image

on:
  release:
    types: [published]
  push:
    branches: [main, staging, uat,dev]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1

permissions:
  contents: write 
  packages: write
  actions: read

jobs:
  build-and-publish:
    name: Build and Publish
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || github.ref == 'refs/heads/uat' && 'uat' || github.ref == 'refs/heads/dev' && 'dev' || 'dev' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:master
          install: true
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=ref,event=branch,prefix={{branch}}-
            type=ref,event=tag
            type=ref,event=pr
            type=sha,format=long
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=staging-latest,enable=${{ github.ref == 'refs/heads/staging' }}
            type=raw,value=uat-latest,enable=${{ github.ref == 'refs/heads/uat' }}
            type=raw,value=dev-latest,enable=${{ github.ref == 'refs/heads/dev' }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          build-args: |
            NODE_ENV=${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || github.ref == 'refs/heads/uat' && 'uat' ||github.ref == 'refs/heads/dev' && 'dev' || 'dev' }}

      - name: Update Release with Image Info
        if: success() && github.event_name == 'release'
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const releaseId = ${{ github.event.release.id }};
            const version = '${{ github.ref_name }}';
            const registry = '${{ env.REGISTRY }}'.toLowerCase();
            const ownerLower = owner.toLowerCase();
            const imageName = `${registry}/${ownerLower}/${repo}`;
            
            let envTag = 'latest';
            let envName = 'Production';
            let branchName = 'main';
            
            if ('${{ github.ref }}'.startsWith('refs/heads/staging')) {
              envTag = 'staging-latest';
              envName = 'Staging';
              branchName = 'staging';
            } else if ('${{ github.ref }}'.startsWith('refs/heads/uat')) {
              envTag = 'uat-latest';
              envName = 'UAT';
              branchName = 'uat';
            } else if ('${{ github.ref }}'.startsWith('refs/heads/dev')) {
              envTag = 'dev-latest';
              envName = 'Dev';
              branchName = 'dev';
            }
            
            const versionMatch = version.match(/v?(\d+)\.(\d+)\.(\d+)/);
            const majorVersion = versionMatch ? versionMatch[1] : '';
            const minorVersion = versionMatch ? `${versionMatch[1]}.${versionMatch[2]}` : '';
            
            const message = `### üê≥ Docker Image\n` +
                          `**${envName} Image:** \`${imageName}:${envTag}\`\n` +
                          `**Version Tag:** \`${imageName}:${version}\`\n` +
                          `**Branch Tag:** \`${imageName}:${branchName}\`\n` +
                          (majorVersion ? `**Major Version:** \`${imageName}:${majorVersion}\`\n` : '') +
                          (minorVersion ? `**Minor Version:** \`${imageName}:${minorVersion}\`\n` : '') +
                          `**SHA Tag:** \`${imageName}:sha-${{ github.sha }}\`\n\n` +
                          `#### Pull Commands\n\`\`\`bash\n` +
                          `# Pull by version (recommended)\ndocker pull ${imageName}:${version}\n\n` +
                          `# Pull ${envName} image\ndocker pull ${imageName}:${envTag}\n\`\`\``;

            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: releaseId,
              body: `${{ github.event.release.body }}\n\n${message}`
            });

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache