name: Auto Create Release

on:
  pull_request:
    types: [closed]
    branches: [staging, dev]

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write

jobs:
  auto-release:
    if: github.event.pull_request.merged == true
    name: Auto Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest tag
        id: get_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Determine version bump
        id: version_bump
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
          
          BUMP_TYPE="patch"
          
          echo "=== Version Bump Detection ==="
          echo "PR Title: $PR_TITLE"
          echo "PR Labels: $PR_LABELS"
          echo "PR Body contains BREAKING CHANGE: $(echo "$PR_BODY" | grep -q "BREAKING.CHANGE" && echo "YES" || echo "NO")"
          
          if [[ "$PR_TITLE" =~ \[major\]|\[MAJOR\] ]] || [[ "$PR_LABELS" =~ major ]] || [[ "$PR_BODY" =~ BREAKING.CHANGE ]]; then
            BUMP_TYPE="major"
          elif [[ "$PR_TITLE" =~ \[minor\]|\[MINOR\] ]] || [[ "$PR_LABELS" =~ minor ]] || [[ "$PR_LABELS" =~ feature ]]; then
            BUMP_TYPE="minor"
          elif [[ "$PR_TITLE" =~ \[patch\]|\[PATCH\] ]] || [[ "$PR_LABELS" =~ patch ]] || [[ "$PR_LABELS" =~ bugfix ]] || [[ "$PR_LABELS" =~ bug ]]; then
            BUMP_TYPE="patch"
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "Determined version bump type: $BUMP_TYPE"

      - name: Calculate new version
        id: new_version
        run: |
          LATEST_TAG="${{ steps.get_tag.outputs.latest_tag }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          echo "=== Version Calculation ==="
          echo "Latest tag: $LATEST_TAG"
          echo "Bump type: $BUMP_TYPE"
          
          VERSION_NUMBER=${LATEST_TAG#v}
          
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUMBER"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}
          
          echo "Current version components: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
          
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version calculated: $NEW_VERSION"

      - name: Generate release notes
        id: release_notes
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"
          
          RELEASE_NOTES="## What's Changed

          ### üöÄ Changes in this Release
          * $PR_TITLE (#$PR_NUMBER) by @$PR_AUTHOR

          ### üìù Details
          $PR_BODY

          ### üè∑Ô∏è Version Information
          * **Release Type**: $BUMP_TYPE version bump
          * **Previous Version**: ${{ steps.get_tag.outputs.latest_tag }}
          * **New Version**: ${{ steps.new_version.outputs.new_version }}

          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.get_tag.outputs.latest_tag }}...${{ steps.new_version.outputs.new_version }}

          > üê≥ Docker images will be automatically built and published shortly."
          
          echo "$RELEASE_NOTES" > release_notes.md
          echo "Release notes generated successfully"

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new_version.outputs.new_version }}
          name: Release ${{ steps.new_version.outputs.new_version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          make_latest: true
          generate_release_notes: false

      - name: Wait for Release to be Available
        run: |
          echo "Waiting 10 seconds for release to be fully created..."
          sleep 10

      - name: Comment on PR with release info
        uses: actions/github-script@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.new_version.outputs.new_version }}';
            const bumpType = '${{ steps.version_bump.outputs.bump_type }}';
            
            github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üéâ **Auto-Release Created!**

            **üè∑Ô∏è Version**: [${version}](https://github.com/${{ github.repository }}/releases/tag/${version}) (${bumpType} bump)
            **üöÄ Status**: Release created successfully
            **üê≥ Docker Build**: Docker workflow should trigger automatically

            The Docker image will be available shortly at \`ghcr.io/${{ github.repository }}:${version}\`

            ---
            *This release was automatically created based on your PR labels and title.*`
            });

      - name: Summary
        run: |
          echo "=== AUTO-RELEASE SUMMARY ==="
          echo "‚úÖ Release created: ${{ steps.new_version.outputs.new_version }}"
          echo "üìù Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.new_version.outputs.new_version }}"
          echo "üîÑ Docker workflow should trigger automatically"
          echo "üê≥ Docker image will be available at: ghcr.io/${{ github.repository }}:${{ steps.new_version.outputs.new_version }}"